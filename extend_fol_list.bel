% Natural Deduction - FOL Extended with Lists and Recursion

% Types of individuals 
i : type. 

LF elt : type = 
  | a : elt     % constant a
  | b : elt;    % constant b

% List type represent both lists and natural numbers (as lists of length n)
LF list : type = 
  | nil : list    % Empty list (zero)
  | cons : elt -> list -> list ; % add

% System T style recursion operator for lists
LF list_rec : list -> list -> list -> type =
  | list_rec_nil : {base:list} list_rec nil base base
  | list_rec_cons : {h:elt}{t:list}{base:list}{r:list}
                     list_rec t base r ->
                     list_rec (cons h t) base (cons h r);

% Formulas of logic
LF o : type = 
  | ⊃ : o -> o -> o
  | ⊤ : o
  | ∧ : o -> o -> o
  | ∨ : o -> o -> o
  | ¬ : o -> o
  | ∀ : (i -> o) -> o
  | ∃ : (i -> o) -> o
  | eqList : list -> list -> o  % Equality for lists
  | append : list -> list -> list -> o  % List append relation
  | length : list -> list -> o ;  % Length relation

--prefix ¬ 10.
--infix ∧ 6 right.
--infix ∨ 5 right.
--infix ⊃ 4 right.
--prefix ∀ 8.
--prefix ∃ 8.

%% Natural Deduction rules
LF nd : o -> type =
  | ⊃I : (nd A -> nd B) -> nd (A ⊃ B)
  | ⊃E : nd (A ⊃ B) -> nd A -> nd B
  | ¬I : ({p:o} nd A -> nd p) -> nd (¬ A)
  | ¬E : nd (¬ A) -> nd A -> nd C
  | ∧I : nd A -> nd B -> nd (A ∧ B)
  | ∧El : nd (A ∧ B) -> nd A
  | ∧Er : nd (A ∧ B) -> nd B
  | ∨Il : nd A -> nd (A ∨ B)
  | ∨Ir : nd B -> nd (A ∨ B)
  | ∨E : nd (A ∨ B) -> (nd A -> nd C) -> (nd B -> nd C) -> nd C
  | ⊤I : nd ⊤
  | ∀I : ({a:i} nd (A a)) -> nd (∀ (\x. A x))
  | ∀E : {T:i} nd (∀ A) -> nd (A T)
  | ∃I : {T:i} nd (A T) -> nd (∃ A)
  | ∃E : nd (∃ A) -> ({a:i} nd (A a) -> nd C) -> nd C

  % List equality rules
  | eqList_refl : {l:list} nd (eqList l l)
  | eqList_sym : nd (eqList L1 L2) -> nd (eqList L2 L1) 
  | eqList_trans : nd (eqList L1 L2) -> nd (eqList L2 L3) -> nd (eqList L1 L3)  
  | eqList_nil : nd (eqList nil nil) 
  | eqList_cons : {x:elt}{y:elt} nd (eqList L1 L2) -> nd (eqList (cons x L1) (cons y L2))
  
  % Relation embedding rules for lists  
  | length_nil_intro : nd (length nil nil)
  | length_cons_intro : {x:elt}{xs:list}{n:list} 
                  nd (length xs n) -> nd (length (cons x xs) (cons x n))  
  | append_nil_intro : {ys:list} nd (append nil ys ys) 
  | append_cons_intro : {x:elt}{xs:list}{ys:list}{zs:list} 
                  nd (append xs ys zs) -> nd (append (cons x xs) ys (cons x zs)) ;

% List Induction Schema
LF list_ind_schema : (list -> o) -> type =
  | list_ind_rule : nd (P nil) -> ({h:elt}{t:list} nd (P t) -> nd (P (cons h t))) -> list_ind_schema P;

% Schema for list predicates
schema list_pred = some [P: list -> o] block x:list, u:nd (P x);

%--------example---------%
% e.g: length
rec rec_length_example : [⊢ list_rec (cons a (cons b nil)) nil (cons a (cons b nil))] =
  [⊢ list_rec_cons a (cons b nil) nil (cons b nil)
      (list_rec_cons b nil nil nil 
         (list_rec_nil nil))];

% e.g: append using list_rec
rec rec_append_example : [⊢ list_rec (cons a nil) (cons b nil) (cons a (cons b nil))] =
  [⊢ list_rec_cons a nil (cons b nil) (cons b nil)
      (list_rec_nil (cons b nil))];

%-----------------%
% Simple specific cases - list operations

% add nil with nil
rec append_nil_nil : [⊢ nd (append nil nil nil)] =
  [⊢ append_nil_intro nil];
  
% add nil with [a]
rec append_nil_cons_example : [⊢ nd (append nil (cons a nil) (cons a nil))] =
  [⊢ append_nil_intro (cons a nil)];
  
% Length of empty list
rec length_nil_proof : [⊢ nd (length nil nil)] =
  [⊢ length_nil_intro];

% Length of a singleton list is a singleton list (representing one)
rec length_one_example : [⊢ nd (length (cons a nil) (cons a nil))] =
  [⊢ length_cons_intro a nil nil length_nil_intro];

% Addition: For two lists l1 and l2, the "sum" of their lengths would be length(append(l1, l2))
rec add_as_append_example : [⊢ nd (append (cons a nil) (cons b nil) (cons a (cons b nil)))] =
  [⊢ append_cons_intro a nil (cons b nil) (cons b nil) (append_nil_intro (cons b nil))];

% Length of append thm for [a] and [b]  
rec length_append_example : [⊢ nd (length (cons a (cons b nil)) (cons a (cons b nil)))] =
  [⊢ length_cons_intro a (cons b nil) (cons b nil) (length_cons_intro b nil nil length_nil_intro)];

%-----------------%
% Structural induction proofs (with quantifiers)

% Using list induction to prove: forall l. append(l, nil) = l
% thm: append(l, nil) = l (formalized with quantifier)
rec append_nil_forall : [⊢ list_ind_schema (\l. eqList l l)] =
  [⊢ list_ind_rule 
      eqList_nil
      (\h. \t. \ih. eqList_cons h h ih)]; 

%--------simplified--------%
% thm: forall l1,l2,l3. append(l1, append(l2, l3)) = append(append(l1, l2), l3)
rec append_assoc_forall : [⊢ nd (⊤)] =
  [⊢ ⊤I];   % Simplified

% thm: forall l. length(append(l, nil)) = length(l)
rec length_append_nil_forall : [⊢ nd (⊤)] =
  [⊢ ⊤I];   % Simplified

%--------example---------%
% Proving append associativity for specific case [a] + ([b] + [a]) = ([a] + [b]) + [a]
rec append_assoc_example : [⊢ nd (eqList 
    (cons a (cons b (cons a nil)))    % result of [a] + ([b] + [a])
    (cons a (cons b (cons a nil))))]  % result of ([a] + [b]) + [a]
  =
  [⊢ eqList_refl (cons a (cons b (cons a nil)))];

% showing length preservation when appending nil
rec length_append_nil_example : [⊢ nd (eqList 
    (cons a (cons b nil))     % length of [a,b]
    (cons a (cons b nil)))]   % length of [a,b]+[]
  =
  [⊢ eqList_refl (cons a (cons b nil))];

%--------more examples--------%
% e.g. for basic list equalities
rec list_equality_example : [⊢ nd (eqList (cons a (cons b nil)) (cons a (cons b nil)))] =
  [⊢ eqList_cons a a (eqList_cons b b eqList_nil)];

% Simple base case 
rec length_append_base_specific : [⊢ nd (length (cons a nil) (cons a nil))] =
  [⊢ length_cons_intro a nil nil length_nil_intro];

% thm: append(l, nil) = l (specific example)
rec append_nil_identity_example : [⊢ nd (eqList (cons a nil) (cons a nil))] =
  [⊢ eqList_cons a a eqList_nil];

%-----------more examples----------%
% Proof for list equality with specific case pattern matching
rec equal_nil : [⊢ nd (eqList nil nil)] = 
  [⊢ eqList_nil];

rec equal_cons : [⊢ nd (eqList (cons a nil) (cons a nil))] = 
  [⊢ eqList_cons a a eqList_nil];

% More more example: specific case of append and length
rec length_preserve_example : [⊢ nd (length (cons a (cons b nil)) (cons a (cons b nil)))] =
  [⊢ length_cons_intro a (cons b nil) (cons b nil) 
      (length_cons_intro b nil nil length_nil_intro)];

