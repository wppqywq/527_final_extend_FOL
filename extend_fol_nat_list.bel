% Natural Deduction - FOL Extended with nat and list

% Types of individuals and new data types
i : type. 

LF nat : type = 
  | z : nat 
  | suc : nat -> nat ;

LF list : type = 
  | nil : list 
  | cons : nat -> list -> list ;

%% Formulas of logic
LF o : type = 
  | ⊃ : o -> o -> o
  | ⊤ : o
  | ∧ : o -> o -> o
  | ∨ : o -> o -> o
  | ¬ : o -> o
  | ∀ : (i -> o) -> o
  | ∃ : (i -> o) -> o
  | eq : nat -> nat -> o    % Equality for natural numbers
  | eqList : list -> list -> o  % Equality for lists
  | appendR : list -> list -> list -> o  % Embedding of append relation
  | lengthR : list -> nat -> o  % Embedding of length relation
  | addR : nat -> nat -> nat -> o ; % Embedding of add relation

--prefix ¬ 10.
--infix ∧ 6 right.
--infix ∨ 5 right.
--infix ⊃ 4 right.
--prefix ∀ 8.
--prefix ∃ 8.

%% Natural Deduction rules for relation embeddings
LF nd : o -> type =
  | ⊃I : (nd A -> nd B) -> nd (A ⊃ B)
  | ⊃E : nd (A ⊃ B) -> nd A -> nd B
  | ¬I : ({p:o} nd A -> nd p) -> nd (¬ A)
  | ¬E : nd (¬ A) -> nd A -> nd C
  | ∧I : nd A -> nd B -> nd (A ∧ B)
  | ∧El : nd (A ∧ B) -> nd A
  | ∧Er : nd (A ∧ B) -> nd B
  | ∨Il : nd A -> nd (A ∨ B)
  | ∨Ir : nd B -> nd (A ∨ B)
  | ∨E : nd (A ∨ B) -> (nd A -> nd C) -> (nd B -> nd C) -> nd C
  | ⊤I : nd ⊤
  | ∀I : ({a:i} nd (A a)) -> nd (∀ (\x. A x))
  | ∀E : {T:i} nd (∀ A) -> nd (A T)
  | ∃I : {T:i} nd (A T) -> nd (∃ A)
  | ∃E : nd (∃ A) -> ({a:i} nd (A a) -> nd C) -> nd C

  % Equality rules
  | eq_refl : {n:nat} nd (eq n n)
  | eq_sym : nd (eq M N) -> nd (eq N M)
  | eq_trans : nd (eq M N) -> nd (eq N P) -> nd (eq M P)
  | eq_suc : nd (eq M N) -> nd (eq (suc M) (suc N))
  | eq_z : nd (eq z z)

  % List equality rules
  | eqList_refl : {l:list} nd (eqList l l)
  | eqList_sym : nd (eqList L1 L2) -> nd (eqList L2 L1)
  | eqList_trans : nd (eqList L1 L2) -> nd (eqList L2 L3) -> nd (eqList L1 L3)
  | eqList_nil : nd (eqList nil nil)
  | eqList_cons : nd (eq M N) -> nd (eqList L1 L2) -> nd (eqList (cons M L1) (cons N L2))
  
  % Relation embedding rules
  | addR_z : {n:nat} nd (addR z n n)
  | addR_s : {m:nat}{n:nat}{p:nat} nd (addR m n p) -> nd (addR (suc m) n (suc p))
  
  | lengthR_nil : nd (lengthR nil z)
  | lengthR_cons : {x:nat}{xs:list}{n:nat} nd (lengthR xs n) -> nd (lengthR (cons x xs) (suc n))
  
  | appendR_nil : {ys:list} nd (appendR nil ys ys)
  | appendR_cons : {x:nat}{xs:list}{ys:list}{zs:list} 
                  nd (appendR xs ys zs) -> nd (appendR (cons x xs) ys (cons x zs)) ;

%% Function definitions as LF constants
LF add : nat -> nat -> nat -> type =
  | add_z : {n:nat} add z n n
  | add_s : {m:nat}{n:nat}{p:nat} add m n p -> add (suc m) n (suc p) ;

LF length : list -> nat -> type =
  | length_nil : length nil z
  | length_cons : {x:nat}{xs:list}{n:nat} length xs n -> length (cons x xs) (suc n) ;

LF append : list -> list -> list -> type =
  | append_nil : {ys:list} append nil ys ys
  | append_cons : {x:nat}{xs:list}{ys:list}{zs:list} append xs ys zs -> append (cons x xs) ys (cons x zs) ;

%% Enhanced version with induction schemas

% Define induction schema for natural numbers
LF nat_ind_schema : (nat -> o) -> type =
  | nat_ind_rule : nd (P z) -> ({n:nat} nd (P n) -> nd (P (suc n))) -> nat_ind_schema P;

% Define induction schema for lists
LF list_ind_schema : (list -> o) -> type =
  | list_ind_rule : nd (Q nil) -> ({h:nat}{t:list} nd (Q t) -> nd (Q (cons h t))) -> list_ind_schema Q;

% Nat induction example (object-level thm)
rec nat_ind_example : [⊢ nat_ind_schema (\n. eq n n)] =
  [⊢ nat_ind_rule (eq_refl z) (\n. \ih. eq_suc ih)];

% List induction example (object-level thm)
rec list_ind_example : [⊢ list_ind_schema (\l. eqList l l)] =
  [⊢ list_ind_rule eqList_nil (\h. \t. \ih. eqList_cons (eq_refl h) ih)];

% thm: add(n, z) = n (using nat induction schema)
rec add_z_identity : [⊢ nat_ind_schema (\n. eq n n)] =
  [⊢ nat_ind_rule 
       (eq_refl z) 
       (\n. \ih. eq_suc ih)
  ];

% thm: append(l, nil) = l (using list induction schema)
rec append_nil_identity : [⊢ list_ind_schema (\l. eqList l l)] =
  [⊢ list_ind_rule 
       eqList_nil
       (\h. \t. \ih. eqList_cons (eq_refl h) ih)
  ];

% thm: length(append(l1, l2)) = add(length(l1), length(l2))
% Base case: nil appended with any list 
rec append_nil_result : [⊢ nd (appendR nil nil nil)] =
  [⊢ appendR_nil nil];

% Length of empty list is zero
rec length_nil_is_zero : [⊢ nd (lengthR nil z)] =
  [⊢ lengthR_nil];

% Length of cons list is successor of tail length
rec length_cons_example : [⊢ nd (lengthR (cons z nil) (suc z))] =
  [⊢ lengthR_cons z nil z lengthR_nil];

% Simple append examples
rec append_example_proof : [⊢ nd (appendR (cons z nil) (cons (suc z) nil) (cons z (cons (suc z) nil)))] =
  [⊢ appendR_cons z nil (cons (suc z) nil) (cons (suc z) nil) (appendR_nil (cons (suc z) nil))];

% Simple specific cases instead of parameterized versions

% Simple base case for empty list
rec length_nil_proof : [⊢ nd (lengthR nil z)] =
  [⊢ lengthR_nil];

% add nil with nil gives nil
rec append_nil_nil : [⊢ nd (appendR nil nil nil)] =
  [⊢ appendR_nil nil];
  
% add nil with [0] gives [0]
rec append_nil_cons : [⊢ nd (appendR nil (cons z nil) (cons z nil))] =
  [⊢ appendR_nil (cons z nil)];
  
% Base case: length(append(nil, [0])) = length([0])
rec length_append_base_specific1 : [⊢ nd (appendR nil (cons z nil) (cons z nil))] =
  [⊢ appendR_nil (cons z nil)];

rec length_append_base_specific2 : [⊢ nd (lengthR (cons z nil) (suc z))] =
  [⊢ lengthR_cons z nil z lengthR_nil];

% Extended thms about arithmetic properties

% Simple addition examples
rec add_identity : [⊢ nd (addR z z z)] =
  [⊢ addR_z z];

rec add_suc_example : [⊢ nd (addR (suc z) z (suc z))] =
  [⊢ addR_s z z z (addR_z z)];

rec add_two_example : [⊢ nd (addR (suc z) (suc z) (suc (suc z)))] =
  [⊢ addR_s z (suc z) (suc z) (addR_z (suc z))];

% List length and append examples
rec length_nil : [⊢ nd (lengthR nil z)] =
  [⊢ lengthR_nil];

rec length_single : [⊢ nd (lengthR (cons z nil) (suc z))] =
  [⊢ lengthR_cons z nil z lengthR_nil];

rec append_example : [⊢ nd (appendR (cons z nil) (cons (suc z) nil) (cons z (cons (suc z) nil)))] =
  [⊢ appendR_cons z nil (cons (suc z) nil) (cons (suc z) nil) (appendR_nil (cons (suc z) nil))];

% Demonstrate simple induction principles without quantifiers
rec nat_simple_ind : [⊢ nd (⊤)] =
  [⊢ ⊤I];

rec list_simple_ind : [⊢ nd (⊤)] =
  [⊢ ⊤I];
  